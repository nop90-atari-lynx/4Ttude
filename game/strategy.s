;
; File generated by cc65 v 2.13.9
;
	.fopt		compiler,"cc65 v 2.13.9"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_coordtoint
	.import		_opponent
	.import		_legal
	.import		_cr_isable
	.import		_cr_isects
	.import		_vs_clear
	.import		_vs_incscore
	.import		_vs_isable
	.import		_vs_disable
	.import		_vs_pickmember
	.import		_vs_combine
	.export		_set_difficulty
	.export		_makemove
	.export		_spots
	.export		_onesum
	.export		_twosum
	.export		_others
	.export		_fo
	.export		_ft
	.export		_match

.segment	"GAME_RODATA"

_ruleset:
	.byte	$00
	.addr	_any
	.byte	$01
	.addr	_win
	.byte	$01
	.addr	_block
	.byte	$06
	.addr	_newforce
	.byte	$06
	.addr	_newblockforce
	.byte	$07
	.addr	_kill_block_1
	.byte	$07
	.addr	_kill_setup_1
	.byte	$08
	.addr	_kill_block_2
	.byte	$09
	.addr	_kill_block_3
	.byte	$07
	.addr	_kill_setup_2
	.byte	$07
	.addr	_kill_setup_3
	.byte	$0A
	.addr	_prekill
	.byte	$0A
	.addr	_prekill_1
	.byte	$04
	.addr	_force
	.byte	$04
	.addr	_blockforce
	.byte	$05
	.addr	_setupforce
	.byte	$05
	.addr	_nixsetup
	.byte	$02
	.addr	_makethree
	.byte	$02
	.addr	_blocktwo
	.byte	$03
	.addr	_maketwo
	.byte	$03
	.addr	_blockone
	.byte	$09
	.addr	_corners
	.byte	$00
	.word	$0000

.segment	"GAME_BSS"

_spots:
	.res	130,$00
_onesum:
	.res	130,$00
_twosum:
	.res	130,$00
_others:
	.res	130,$00
_fo:
	.res	160,$00
_ft:
	.res	160,$00
_match:
	.res	160,$00

; ---------------------------------------------------------------
; void __near__ set_difficulty (__near__ struct STRATEGY_S*, int)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_set_difficulty: near

.segment	"GAME_CODE"

	jsr     decsp4
	ldx     #$00
	txa
	ldy     #$02
	jsr     staxysp
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	lda     #<(_ruleset)
	ldx     #>(_ruleset)
L033D:	jsr     stax0sp
	ldy     #$01
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	beq     L032C
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sec
	ldy     #$04
	sbc     (sp),y
	sta     tmp1
	lda     #$00
	iny
	sbc     (sp),y
	ora     tmp1
	beq     L033B
	bcs     L032D
L033B:	ldy     #$07
	jsr     ldaxysp
	jsr     incax4
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0337
	inx
L0337:	ldy     #$04
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
L032D:	jsr     ldax0sp
	jsr     incax3
	bra     L033D
L032C:	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$02
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; int __near__ makemove (__near__ struct STRATEGY_S*, __near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_makemove: near

.segment	"GAME_CODE"

	jsr     decsp2
	lda     #<(_spots)
	ldx     #>(_spots)
	jsr     pushax
	jsr     _vs_clear
	lda     #<(_others)
	ldx     #>(_others)
	jsr     pushax
	jsr     _vs_clear
	ldx     #$00
	txa
L0340:	jsr     stax0sp
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	jsr     tosicmp
	bpl     L0011
	ldy     #$09
	jsr     ldaxysp
	jsr     incax4
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     ldaxi
	ldy     #$02
	jsr     pushwidx
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	lda     #<(_spots)
	ldx     #>(_spots)
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	jsr     callax
	jsr     incsp2
	lda     _spots
	ora     _spots+1
	bne     L0011
	jsr     ldax0sp
	ina
	bne     L0340
	inx
	bra     L0340
L0011:	jsr     ldax0sp
	ina
	bne     L0023
	inx
L0023:	jsr     stax0sp
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	jsr     tosicmp
	jpl     L0027
L0026:	ldy     #$09
	jsr     ldaxysp
	jsr     incax4
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     ldaxi
	ldy     #$02
	jsr     pushwidx
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	lda     #<(_others)
	ldx     #>(_others)
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	jsr     callax
	jsr     incsp2
	lda     #<(_spots)
	ldx     #>(_spots)
	jsr     pushax
	lda     #<(_others)
	ldx     #>(_others)
	jsr     pushax
	jsr     _vs_combine
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	jsr     tosicmp
	bpl     L0027
	lda     _spots
	cmp     #$02
	lda     _spots+1
	sbc     #$00
	bvs     L0037
	eor     #$80
L0037:	bmi     L0026
L0027:	lda     #<(_spots)
	ldx     #>(_spots)
	jsr     pushax
	jsr     _vs_pickmember
	ldx     #$00
	cmp     #$80
	bcc     L000B
	dex
L000B:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ sum (__near__ struct COMBOSET_S*, __near__ struct VSET_S*, int, int)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_sum: near

.segment	"GAME_CODE"

	jsr     decsp4
	ldy     #$0B
	jsr     pushwysp
	jsr     _vs_clear
	ldx     #$00
	txa
L0346:	ldy     #$02
	jsr     staxysp
	jsr     pushax
	ldy     #$0D
	jsr     ldaxysp
	ldy     #$00
	jsr     ldaidx
	jsr     tosicmp
	jpl     L0040
	ldy     #$0B
	jsr     ldaxysp
	jsr     incax2
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     mulax9
	jsr     tosaddax
	ldy     #$02
	jsr     ldaidx
	ldy     #$04
	cmp     (sp),y
	jne     L0041
	txa
	iny
	cmp     (sp),y
	jne     L0041
	ldy     #$0B
	jsr     ldaxysp
	jsr     incax2
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     mulax9
	jsr     tosaddax
	jsr     ldaxi
	ldy     #$06
	cmp     (sp),y
	bne     L0041
	txa
	iny
	cmp     (sp),y
	bne     L0041
	ldx     #$00
	txa
L0345:	jsr     stax0sp
	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     #$0F
	jsr     ldaxysp
	jsr     incax2
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	jsr     mulax9
	jsr     tosaddax
	ldy     #$02
	jsr     ldaidx
	jsr     tossubax
	jsr     tosicmp
	bpl     L0041
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0D
	jsr     ldaxysp
	jsr     incax2
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	jsr     mulax9
	jsr     tosaddax
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     #$00
	jsr     ldaidx
	jsr     pusha
	jsr     _vs_incscore
	jsr     ldax0sp
	ina
	bne     L0345
	inx
	bra     L0345
L0041:	ldy     #$03
	jsr     ldaxysp
	ina
	jne     L0346
	inx
	jmp     L0346
L0040:	ldy     #$0C
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ any (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_any: near

.segment	"GAME_CODE"

	jsr     decsp2
	ldx     #$00
	txa
L0348:	jsr     stax0sp
	cmp     #$40
	txa
	sbc     #$00
	bvc     L0068
	eor     #$80
L0068:	bpl     L0061
	ldy     #$0B
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	jsr     _legal
	stx     tmp1
	ora     tmp1
	beq     L0062
	ldy     #$05
	jsr     pushwysp
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	jsr     _vs_incscore
L0062:	jsr     ldax0sp
	ina
	bne     L0348
	inx
	bra     L0348
L0061:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ win (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_win: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	lda     #$03
	jsr     pusha0
	jsr     _sum
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ block (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_block: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	jsr     _opponent
	jsr     pusha0
	lda     #$03
	jsr     pusha0
	jsr     _sum
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ makethree (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_makethree: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	lda     #$02
	jsr     pusha0
	jsr     _sum
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ blocktwo (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_blocktwo: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	jsr     _opponent
	jsr     pusha0
	lda     #$02
	jsr     pusha0
	jsr     _sum
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ maketwo (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_maketwo: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	lda     #$01
	jsr     pusha0
	jsr     _sum
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ blockone (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_blockone: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	jsr     _opponent
	jsr     pusha0
	lda     #$01
	jsr     pusha0
	jsr     _sum
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ force (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_force: near

.segment	"GAME_CODE"

	jsr     decsp2
	ldy     #$09
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	lda     #$02
	jsr     pusha0
	jsr     _sum
	ldx     #$00
	txa
L034A:	jsr     stax0sp
	cmp     #$40
	txa
	sbc     #$00
	bvc     L00A8
	eor     #$80
L00A8:	bpl     L00A1
	ldy     #$03
	jsr     ldaxysp
	jsr     incax2
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     ldaxi
	cmp     #$02
	txa
	sbc     #$00
	bvc     L00AE
	eor     #$80
L00AE:	bpl     L00A2
	ldy     #$05
	jsr     pushwysp
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	jsr     _vs_disable
L00A2:	jsr     ldax0sp
	ina
	bne     L034A
	inx
	bra     L034A
L00A1:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ blockforce (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_blockforce: near

.segment	"GAME_CODE"

	ldy     #$09
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	jsr     _opponent
	jsr     pusha0
	ldy     #$09
	jsr     pushwysp
	jsr     _force
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ setupforce (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_setupforce: near

.segment	"GAME_CODE"

	jsr     decsp6
	ldy     #$09
	jsr     pushwysp
	jsr     _vs_clear
	lda     #<(_onesum)
	ldx     #>(_onesum)
	jsr     pushax
	jsr     _vs_clear
	lda     #<(_twosum)
	ldx     #>(_twosum)
	jsr     pushax
	jsr     _vs_clear
	ldy     #$0D
	jsr     pushwysp
	lda     #<(_onesum)
	ldx     #>(_onesum)
	jsr     pushax
	ldy     #$0F
	jsr     pushwysp
	lda     #$01
	jsr     pusha0
	jsr     _sum
	ldy     #$0D
	jsr     pushwysp
	lda     #<(_twosum)
	ldx     #>(_twosum)
	jsr     pushax
	ldy     #$0F
	jsr     pushwysp
	lda     #$02
	jsr     pusha0
	jsr     _sum
	ldx     #$00
	txa
L0359:	ldy     #$04
	jsr     staxysp
	cmp     #$40
	txa
	sbc     #$00
	bvc     L00D2
	eor     #$80
L00D2:	jpl     L00CB
	lda     #<(_onesum)
	ldx     #>(_onesum)
	jsr     pushax
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	jsr     _vs_isable
	stx     tmp1
	ora     tmp1
	jeq     L00CC
	lda     #<(_twosum)
	ldx     #>(_twosum)
	jsr     pushax
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	jsr     _vs_isable
	stx     tmp1
	ora     tmp1
	jeq     L00CC
	ldx     #$00
	txa
L0358:	ldy     #$02
	jsr     staxysp
	jsr     pushax
	ldy     #$0D
	jsr     ldaxysp
	ldy     #$00
	jsr     ldaidx
	jsr     tosicmp
	jpl     L00CC
	ldy     #$0B
	jsr     ldaxysp
	jsr     incax2
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     mulax9
	jsr     tosaddax
	jsr     pushax
	jsr     ldax0sp
	ldy     #$02
	jsr     ldaidx
	cmp     #$03
	jne     L00FC
	jsr     ldax0sp
	jsr     ldaxi
	ldy     #$0A
	cmp     (sp),y
	jne     L00FC
	txa
	iny
	cmp     (sp),y
	jne     L00FC
	ldx     #$00
	txa
L0356:	ldy     #$02
	jsr     staxysp
	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     #$05
	jsr     ldaxysp
	ldy     #$02
	jsr     ldaidx
	jsr     tossubax
	jsr     tosicmp
	bpl     L00EE
	jsr     ldax0sp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1)
	ldy     #$06
	cmp     (sp),y
	bne     L0350
	txa
	iny
	cmp     (sp),y
	beq     L00EE
L0350:	ldy     #$03
	jsr     ldaxysp
	ina
	bne     L0356
	inx
	bra     L0356
L00EE:	ldy     #$05
	jsr     pushwysp
	lda     #$04
	jsr     pusha0
	ldy     #$05
	jsr     ldaxysp
	ldy     #$02
	jsr     ldaidx
	jsr     tossubax
	jsr     tosicmp
	jeq     L00FC
	ldx     #$00
	txa
L0357:	ldy     #$02
	jsr     staxysp
	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     #$05
	jsr     ldaxysp
	ldy     #$02
	jsr     ldaidx
	jsr     tossubax
	jsr     tosicmp
	bpl     L00FC
	jsr     ldax0sp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1)
	ldy     #$06
	cmp     (sp),y
	bne     L0351
	txa
	iny
	cmp     (sp),y
	beq     L00FC
L0351:	ldy     #$0B
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	jsr     ldaxysp
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     #$00
	jsr     ldaidx
	jsr     pusha
	jsr     _vs_incscore
	ldy     #$03
	jsr     ldaxysp
	ina
	bne     L0357
	inx
	bra     L0357
L00FC:	jsr     incsp2
	ldy     #$03
	jsr     ldaxysp
	ina
	jne     L0358
	inx
	jmp     L0358
L00CC:	ldy     #$05
	jsr     ldaxysp
	ina
	jne     L0359
	inx
	jmp     L0359
L00CB:	ldy     #$0E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ nixsetup (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_nixsetup: near

.segment	"GAME_CODE"

	jsr     decsp2
	ldy     #$05
	jsr     pushwysp
	jsr     _vs_clear
	lda     #<(_onesum)
	ldx     #>(_onesum)
	jsr     pushax
	jsr     _vs_clear
	lda     #<(_twosum)
	ldx     #>(_twosum)
	jsr     pushax
	jsr     _vs_clear
	ldy     #$09
	jsr     pushwysp
	lda     #<(_onesum)
	ldx     #>(_onesum)
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	lda     #$01
	jsr     pusha0
	jsr     _sum
	ldy     #$09
	jsr     pushwysp
	lda     #<(_twosum)
	ldx     #>(_twosum)
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	lda     #$02
	jsr     pusha0
	jsr     _sum
	ldx     #$00
	txa
L035B:	jsr     stax0sp
	cmp     #$40
	txa
	sbc     #$00
	bvc     L0124
	eor     #$80
L0124:	bpl     L011D
	lda     #<(_onesum)
	ldx     #>(_onesum)
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	jsr     _vs_isable
	stx     tmp1
	ora     tmp1
	beq     L011E
	lda     #<(_twosum)
	ldx     #>(_twosum)
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	jsr     _vs_isable
	stx     tmp1
	ora     tmp1
	beq     L011E
	ldy     #$05
	jsr     pushwysp
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	jsr     _vs_incscore
L011E:	jsr     ldax0sp
	ina
	bne     L035B
	inx
	bra     L035B
L011D:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ killn (__near__ struct COMBOSET_S*, int, __near__ struct VSET_S*, int, int)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_killn: near

.segment	"GAME_CODE"

	ldy     #$06
	lda     (sp),y
	jsr     pusha
	jsr     _opponent
	jsr     pusha0
	ldy     #$10
	jsr     subysp
	ldy     #$19
	jsr     pushwysp
	jsr     _vs_clear
	lda     #<(_onesum)
	ldx     #>(_onesum)
	jsr     pushax
	jsr     _vs_clear
	lda     #<(_twosum)
	ldx     #>(_twosum)
	jsr     pushax
	jsr     _vs_clear
	ldy     #$1D
	jsr     pushwysp
	lda     #<(_onesum)
	ldx     #>(_onesum)
	jsr     pushax
	ldy     #$1F
	jsr     pushwysp
	lda     #$01
	jsr     pusha0
	jsr     _sum
	ldy     #$1D
	jsr     pushwysp
	lda     #<(_twosum)
	ldx     #>(_twosum)
	jsr     pushax
	ldy     #$1F
	jsr     pushwysp
	lda     #$02
	jsr     pusha0
	jsr     _sum
	lda     _onesum
	ldx     _onesum+1
	jsr     pushax
	ldy     #$15
	jsr     ldaxysp
	jsr     mulax3
	jsr     tosicmp
	jmi     L01B8
	lda     _twosum
	ldx     _twosum+1
	jsr     pushax
	ldy     #$17
	jsr     ldaxysp
	jsr     aslax1
	jsr     tosicmp
	jmi     L01B8
	ldx     #$00
	txa
	ldy     #$08
	jsr     staxysp
L037A:	ldy     #$0E
	jsr     staxysp
	cmp     #$50
	txa
	sbc     #$00
	bvc     L0156
	eor     #$80
L0156:	asl     a
	lda     #$00
	tax
	bcc     L036C
	ldy     #$0F
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_fo)
	tay
	txa
	adc     #>(_fo)
	tax
	tya
	jsr     pushax
	ldy     #$11
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_ft)
	tay
	txa
	adc     #>(_ft)
	tax
	tya
	jsr     pushax
	ldx     #$00
	txa
	tay
	jsr     staxspidx
	jsr     staxspidx
	ldy     #$0F
	jsr     ldaxysp
	ina
	bne     L037A
	inx
	bra     L037A
L036C:	ldy     #$0E
	jsr     staxysp
	jsr     pushax
	ldy     #$1D
	jsr     ldaxysp
	ldy     #$00
	jsr     ldaidx
	jsr     tosicmp
	jpl     L015F
	ldy     #$1B
	jsr     ldaxysp
	jsr     incax2
	jsr     pushax
	ldy     #$11
	jsr     ldaxysp
	jsr     mulax9
	jsr     tosaddax
	jsr     pushax
	jsr     ldax0sp
	jsr     ldaxi
	ldy     #$12
	cmp     (sp),y
	bne     L036E
	txa
	iny
	cmp     (sp),y
	jeq     L01A7
L036E:	jsr     ldax0sp
	ldy     #$02
	jsr     ldaidx
	jsr     pushax
	lda     #$04
	sec
	ldy     #$16
	sbc     (sp),y
	pha
	lda     #$00
	iny
	sbc     (sp),y
	tax
	pla
	sec
	iny
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     tosicmp
	jne     L01A7
	ldx     #$00
	txa
	ldy     #$06
	jsr     staxysp
	ldy     #$08
	jsr     staxysp
	ldy     #$04
	jsr     staxysp
L037B:	ldy     #$0E
	jsr     staxysp
	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     #$05
	jsr     ldaxysp
	ldy     #$02
	jsr     ldaidx
	jsr     tossubax
	jsr     tosicmp
	jpl     L0174
	jsr     ldax0sp
	ldy     #$02
	jsr     ldaidx
	cmp     #$02
	bne     L017C
	jsr     ldax0sp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$0F
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1)
	asl     a
	bcc     L0367
	inx
	clc
L0367:	adc     #<(_twosum+2)
	tay
	txa
	adc     #>(_twosum+2)
	tax
	tya
	jsr     ldaxi
	cmp     #$02
	txa
	sbc     #$00
	bvs     L0183
	eor     #$80
L0183:	bpl     L0187
	ldy     #$07
	jsr     ldaxysp
	ina
	bne     L0185
	inx
L0185:	ldy     #$06
	jmp     L0374
L017C:	jsr     ldax0sp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$0F
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1)
	asl     a
	bcc     L0368
	inx
	clc
L0368:	adc     #<(_twosum+2)
	tay
	txa
	adc     #>(_twosum+2)
	tax
	tya
	jsr     ldaxi
	cmp     #$01
	txa
	sbc     #$00
	bvs     L018C
	eor     #$80
L018C:	bpl     L0187
	ldy     #$07
	jsr     ldaxysp
	ina
	bne     L018E
	inx
L018E:	ldy     #$06
	jmp     L0374
L0187:	jsr     ldax0sp
	ldy     #$02
	jsr     ldaidx
	cmp     #$03
	bne     L018F
	jsr     ldax0sp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$0F
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1)
	asl     a
	bcc     L0369
	inx
	clc
L0369:	adc     #<(_onesum+2)
	tay
	txa
	adc     #>(_onesum+2)
	tax
	tya
	jsr     ldaxi
	cmp     #$02
	txa
	sbc     #$00
	bvs     L0196
	eor     #$80
L0196:	bpl     L019A
	ldy     #$09
	jsr     ldaxysp
	ina
	bne     L0198
	inx
L0198:	ldy     #$08
	bra     L0374
L018F:	jsr     ldax0sp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$0F
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1)
	asl     a
	bcc     L036A
	inx
	clc
L036A:	adc     #<(_onesum+2)
	tay
	txa
	adc     #>(_onesum+2)
	tax
	tya
	jsr     ldaxi
	cmp     #$01
	txa
	sbc     #$00
	bvs     L019F
	eor     #$80
L019F:	bpl     L019A
	ldy     #$09
	jsr     ldaxysp
	ina
	bne     L01A1
	inx
L01A1:	ldy     #$08
	bra     L0374
L019A:	ldy     #$05
	jsr     ldaxysp
	ina
	bne     L01A3
	inx
L01A3:	ldy     #$04
L0374:	jsr     staxysp
	ldy     #$0F
	jsr     ldaxysp
	ina
	jne     L037B
	inx
	jmp     L037B
L0174:	ldy     #$05
	jsr     ldaxysp
	cmp     #$01
	txa
	sbc     #$00
	bvs     L01A6
	eor     #$80
L01A6:	jmi     L01A7
	ldy     #$09
	jsr     ldaxysp
	ldy     #$14
	cmp     (sp),y
	jne     L01A7
	txa
	iny
	cmp     (sp),y
	jne     L01A7
	ldy     #$07
	jsr     ldaxysp
	ldy     #$16
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvs     L0362
	eor     #$80
L0362:	bpl     L01A7
	ldy     #$0B
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_fo)
	sta     ptr1
	txa
	adc     #>(_fo)
	sta     ptr1+1
	ldy     #$09
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	ldy     #$0B
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_ft)
	sta     ptr1
	txa
	adc     #>(_ft)
	sta     ptr1+1
	ldy     #$07
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	ldy     #$0B
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L01B5
	inx
L01B5:	ldy     #$0A
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	clc
	adc     #<(_match)
	sta     ptr1
	txa
	adc     #>(_match)
	sta     ptr1+1
	ldy     #$11
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
L01A7:	jsr     incsp2
	ldy     #$0F
	jsr     ldaxysp
	ina
	jne     L036C
	inx
	jmp     L036C
L015F:	ldx     #$00
	txa
L037E:	ldy     #$0E
	jsr     staxysp
	ldy     #$08
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L0363
	eor     #$80
L0363:	jpl     L01B8
	ldy     #$1B
	jsr     ldaxysp
	jsr     incax2
	jsr     pushax
	ldy     #$11
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_match)
	tay
	txa
	adc     #>(_match)
	tax
	tya
	jsr     ldaxi
	jsr     mulax9
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	txa
L037D:	ldy     #$0E
	jsr     staxysp
	jsr     pushax
	ldy     #$1F
	jsr     ldaxysp
	ldy     #$00
	jsr     ldaidx
	jsr     tosicmp
	jpl     L01C4
	ldy     #$0F
	jsr     ldaxysp
	ldy     #$10
	cmp     (sp),y
	bne     L036F
	txa
	iny
	cmp     (sp),y
	jeq     L01C5
L036F:	ldy     #$1D
	jsr     ldaxysp
	jsr     incax2
	jsr     pushax
	ldy     #$11
	jsr     ldaxysp
	jsr     mulax9
	jsr     tosaddax
	ldy     #$02
	jsr     staxysp
	jsr     ldaxi
	ldy     #$12
	cmp     (sp),y
	bne     L0370
	txa
	iny
	cmp     (sp),y
	jeq     L01C5
L0370:	ldy     #$11
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_fo)
	tay
	txa
	adc     #>(_fo)
	tax
	tya
	jsr     ldaxi
	cpx     #$00
	bne     L0371
	cmp     #$00
	beq     L01D3
L0371:	ldy     #$03
	jsr     ldaxysp
	ldy     #$02
	jsr     ldaidx
	cmp     #$03
	beq     L01DE
	jmp     L01C5
L01D3:	ldy     #$11
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_ft)
	tay
	txa
	adc     #>(_ft)
	tax
	tya
	jsr     ldaxi
	cpx     #$00
	bne     L0372
	cmp     #$00
	beq     L01DE
L0372:	ldy     #$03
	jsr     ldaxysp
	ldy     #$02
	jsr     ldaidx
	cmp     #$02
	jne     L01C5
L01DE:	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	jsr     _cr_isects
	stx     tmp1
	ora     tmp1
	jeq     L01C5
	ldx     #$00
	txa
L037C:	ldy     #$0C
	jsr     staxysp
	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     #$07
	jsr     ldaxysp
	ldy     #$02
	jsr     ldaidx
	jsr     tossubax
	jsr     tosicmp
	bpl     L01C5
	jsr     pushw0sp
	ldy     #$05
	jsr     ldaxysp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$0F
	jsr     ldaxysp
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     #$00
	jsr     ldaidx
	jsr     pusha
	jsr     _cr_isable
	stx     tmp1
	ora     tmp1
	bne     L01E6
	ldy     #$1B
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$0F
	jsr     ldaxysp
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     #$00
	jsr     ldaidx
	jsr     pusha
	jsr     _vs_incscore
L01E6:	ldy     #$0D
	jsr     ldaxysp
	ina
	bne     L037C
	inx
	jmp     L037C
L01C5:	ldy     #$0F
	jsr     ldaxysp
	ina
	jne     L037D
	inx
	jmp     L037D
L01C4:	jsr     incsp2
	ldy     #$0F
	jsr     ldaxysp
	ina
	jne     L037E
	inx
	jmp     L037E
L01B8:	ldy     #$1C
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ live (__near__ struct COMBOSET_S*, int, __near__ struct VSET_S*, int, int)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_live: near

.segment	"GAME_CODE"

	ldy     #$06
	lda     (sp),y
	jsr     pusha
	jsr     _opponent
	jsr     pusha0
	ldy     #$AE
	jsr     subysp
	ldy     #$B7
	jsr     pushwysp
	jsr     _vs_clear
	lda     #<(_onesum)
	ldx     #>(_onesum)
	jsr     pushax
	jsr     _vs_clear
	lda     #<(_twosum)
	ldx     #>(_twosum)
	jsr     pushax
	jsr     _vs_clear
	ldy     #$BB
	jsr     pushwysp
	lda     #<(_onesum)
	ldx     #>(_onesum)
	jsr     pushax
	ldy     #$B5
	jsr     pushwysp
	lda     #$01
	jsr     pusha0
	jsr     _sum
	ldy     #$BB
	jsr     pushwysp
	lda     #<(_twosum)
	ldx     #>(_twosum)
	jsr     pushax
	ldy     #$B5
	jsr     pushwysp
	lda     #$02
	jsr     pusha0
	jsr     _sum
	lda     _onesum
	ldx     _onesum+1
	jsr     pushax
	ldy     #$B3
	jsr     ldaxysp
	jsr     mulax3
	jsr     tosicmp
	jmi     L0265
	lda     _twosum
	ldx     _twosum+1
	jsr     pushax
	ldy     #$B5
	jsr     ldaxysp
	jsr     aslax1
	jsr     tosicmp
	jmi     L0265
	ldx     #$00
	txa
	ldy     #$A8
	jsr     staxysp
L0394:	ldy     #$AC
	jsr     staxysp
	jsr     pushax
	ldy     #$BB
	jsr     ldaxysp
	ldy     #$00
	jsr     ldaidx
	jsr     tosicmp
	jpl     L0211
	ldy     #$B9
	jsr     ldaxysp
	jsr     incax2
	jsr     pushax
	ldy     #$AF
	jsr     ldaxysp
	jsr     mulax9
	jsr     tosaddax
	jsr     pushax
	jsr     ldax0sp
	jsr     ldaxi
	ldy     #$B8
	cmp     (sp),y
	bne     L038D
	txa
	iny
	cmp     (sp),y
	jeq     L0259
L038D:	jsr     ldax0sp
	ldy     #$02
	jsr     ldaidx
	jsr     pushax
	lda     #$04
	sec
	ldy     #$B4
	sbc     (sp),y
	pha
	lda     #$00
	iny
	sbc     (sp),y
	tax
	pla
	sec
	iny
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     tosicmp
	jne     L0259
	ldx     #$00
	txa
	ldy     #$A6
	jsr     staxysp
	ldy     #$A8
	jsr     staxysp
	ldy     #$A4
	jsr     staxysp
L0393:	ldy     #$AC
	jsr     staxysp
	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     #$05
	jsr     ldaxysp
	ldy     #$02
	jsr     ldaidx
	jsr     tossubax
	jsr     tosicmp
	jpl     L0226
	jsr     ldax0sp
	ldy     #$02
	jsr     ldaidx
	cmp     #$02
	bne     L022E
	jsr     ldax0sp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$AD
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1)
	asl     a
	bcc     L0388
	inx
	clc
L0388:	adc     #<(_twosum+2)
	tay
	txa
	adc     #>(_twosum+2)
	tax
	tya
	jsr     ldaxi
	cmp     #$02
	txa
	sbc     #$00
	bvs     L0235
	eor     #$80
L0235:	bpl     L0239
	ldy     #$A7
	jsr     ldaxysp
	ina
	bne     L0237
	inx
L0237:	ldy     #$A6
	jmp     L038E
L022E:	jsr     ldax0sp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$AD
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1)
	asl     a
	bcc     L0389
	inx
	clc
L0389:	adc     #<(_twosum+2)
	tay
	txa
	adc     #>(_twosum+2)
	tax
	tya
	jsr     ldaxi
	cmp     #$01
	txa
	sbc     #$00
	bvs     L023E
	eor     #$80
L023E:	bpl     L0239
	ldy     #$A7
	jsr     ldaxysp
	ina
	bne     L0240
	inx
L0240:	ldy     #$A6
	jmp     L038E
L0239:	jsr     ldax0sp
	ldy     #$02
	jsr     ldaidx
	cmp     #$03
	bne     L0241
	jsr     ldax0sp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$AD
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1)
	asl     a
	bcc     L038A
	inx
	clc
L038A:	adc     #<(_onesum+2)
	tay
	txa
	adc     #>(_onesum+2)
	tax
	tya
	jsr     ldaxi
	cmp     #$02
	txa
	sbc     #$00
	bvs     L0248
	eor     #$80
L0248:	bpl     L024C
	ldy     #$A9
	jsr     ldaxysp
	ina
	bne     L024A
	inx
L024A:	ldy     #$A8
	bra     L038E
L0241:	jsr     ldax0sp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$AD
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1)
	asl     a
	bcc     L038B
	inx
	clc
L038B:	adc     #<(_onesum+2)
	tay
	txa
	adc     #>(_onesum+2)
	tax
	tya
	jsr     ldaxi
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0251
	eor     #$80
L0251:	bpl     L024C
	ldy     #$A9
	jsr     ldaxysp
	ina
	bne     L0253
	inx
L0253:	ldy     #$A8
	bra     L038E
L024C:	ldy     #$A5
	jsr     ldaxysp
	ina
	bne     L0255
	inx
L0255:	ldy     #$A4
L038E:	jsr     staxysp
	ldy     #$AD
	jsr     ldaxysp
	ina
	jne     L0393
	inx
	jmp     L0393
L0226:	ldy     #$A5
	jsr     ldaxysp
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0258
	eor     #$80
L0258:	bmi     L0259
	ldy     #$A9
	jsr     ldaxysp
	ldy     #$B2
	cmp     (sp),y
	bne     L0259
	txa
	iny
	cmp     (sp),y
	bne     L0259
	ldy     #$A7
	jsr     ldaxysp
	ldy     #$B4
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvs     L0385
	eor     #$80
L0385:	bpl     L0259
	ldy     #$AB
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0261
	inx
L0261:	ldy     #$AA
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jsr     aslax1
	clc
	adc     #$02
	bcc     L0262
	inx
	clc
L0262:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$AF
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
L0259:	jsr     incsp2
	ldy     #$AD
	jsr     ldaxysp
	ina
	jne     L0394
	inx
	jmp     L0394
L0211:	ldx     #$00
	txa
L0396:	ldy     #$AC
	jsr     staxysp
	ldy     #$A8
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L0386
	eor     #$80
L0386:	jpl     L0265
	ldy     #$B9
	jsr     ldaxysp
	jsr     incax2
	jsr     pushax
	ldy     #$AF
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #$02
	bcc     L0271
	inx
	clc
L0271:	adc     sp
	tay
	txa
	adc     sp+1
	tax
	tya
	jsr     ldaxi
	jsr     mulax9
	jsr     tosaddax
	ldy     #$A0
	jsr     staxysp
	ldx     #$00
	txa
L0395:	ldy     #$AA
	jsr     staxysp
	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     #$A5
	jsr     ldaxysp
	ldy     #$02
	jsr     ldaidx
	jsr     tossubax
	jsr     tosicmp
	bpl     L0266
	ldy     #$B7
	jsr     pushwysp
	ldy     #$A3
	jsr     ldaxysp
	jsr     incax5
	sta     ptr1
	stx     ptr1+1
	ldy     #$AD
	jsr     ldaxysp
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     #$00
	jsr     ldaidx
	jsr     pusha
	jsr     _vs_incscore
	ldy     #$AB
	jsr     ldaxysp
	ina
	bne     L0395
	inx
	bra     L0395
L0266:	ldy     #$AD
	jsr     ldaxysp
	ina
	jne     L0396
	inx
	jmp     L0396
L0265:	ldy     #$BA
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ newforce (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_newforce: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     #$01
	jsr     pusha0
	jsr     push0
	jsr     _killn
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ newblockforce (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_newblockforce: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     #$01
	jsr     pusha0
	jsr     push0
	jsr     _live
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ kill_setup_1 (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_kill_setup_1: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     #$02
	jsr     pusha0
	dea
	jsr     pusha0
	jsr     _killn
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ kill_block_1 (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_kill_block_1: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     #$02
	jsr     pusha0
	dea
	jsr     pusha0
	jsr     _live
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ kill_setup_2 (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_kill_setup_2: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     #$03
	jsr     pusha0
	dea
	jsr     pusha0
	jsr     _killn
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ kill_block_2 (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_kill_block_2: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     #$03
	jsr     pusha0
	dea
	jsr     pusha0
	jsr     _live
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ kill_setup_3 (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_kill_setup_3: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     #$04
	jsr     pusha0
	dea
	jsr     pusha0
	jsr     _killn
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ kill_block_3 (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_kill_block_3: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     #$04
	jsr     pusha0
	dea
	jsr     pusha0
	jsr     _live
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ prekill (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_prekill: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	lda     #$01
	jsr     pusha0
	jsr     pusha0
	jsr     _killn
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ prekill_1 (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_prekill_1: near

.segment	"GAME_CODE"

	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	jsr     push0
	lda     #$02
	jsr     pusha0
	jsr     _killn
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ corners (__near__ struct GBOARD_S*, __near__ struct COMBOSET_S*, int, __near__ struct VSET_S*)
; ---------------------------------------------------------------

.segment	"GAME_CODE"

.proc	_corners: near

.segment	"GAME_CODE"

	jsr     pushw0sp
	jsr     _vs_clear
	jsr     pushw0sp
	lda     #$00
	jsr     pusha
	jsr     pusha
	jsr     pusha
	jsr     _coordtoint
	jsr     pusha
	jsr     _vs_incscore
	jsr     pushw0sp
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     pusha
	jsr     _coordtoint
	jsr     pusha
	jsr     _vs_incscore
	jsr     pushw0sp
	lda     #$00
	jsr     pusha
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     _coordtoint
	jsr     pusha
	jsr     _vs_incscore
	jsr     pushw0sp
	lda     #$03
	jsr     pusha
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     _coordtoint
	jsr     pusha
	jsr     _vs_incscore
	jsr     pushw0sp
	lda     #$00
	jsr     pusha
	jsr     pusha
	lda     #$03
	jsr     pusha
	jsr     _coordtoint
	jsr     pusha
	jsr     _vs_incscore
	jsr     pushw0sp
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #$03
	jsr     pusha
	jsr     _coordtoint
	jsr     pusha
	jsr     _vs_incscore
	jsr     pushw0sp
	lda     #$00
	jsr     pusha
	lda     #$03
	jsr     pusha
	jsr     pusha
	jsr     _coordtoint
	jsr     pusha
	jsr     _vs_incscore
	jsr     pushw0sp
	lda     #$03
	jsr     pusha
	jsr     pusha
	jsr     pusha
	jsr     _coordtoint
	jsr     pusha
	jsr     _vs_incscore
	jmp     incsp8

.endproc

